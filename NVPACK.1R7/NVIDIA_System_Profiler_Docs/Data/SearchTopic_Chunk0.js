define({"0":{i:0.0483091787441035,u:"../content/developertools/mobile/system_profiler/3.9-codeworks/01-overview.htm",a:"Overview NVIDIA System Profiler is a statistical sampling profiler with tracing\nfeatures.  It is designed to work with devices and devkits based on NVIDIA Tegra\nSoC (system-on-chip). Throughout this document we will refer to the Tegra-based device on which\nprofiling happens as target, and the ...",t:"NVIDIA System Profiler User Guide"},"1":{i:0.0483091787441035,u:"../content/developertools/mobile/system_profiler/3.9-codeworks/02-release-notes.htm",a:"NVIDIA System Profiler 3.9 Supported Platforms NVIDIA System Profiler supports multiple platforms.  The build of\nNVIDIA System Profiler that this documentation refers to is compatible with the\nfollowing devices: Android NVIDIA SHIELD Android TV NVIDIA SHIELD Tablet Various devkits L4T (Linux for ...",t:"Release Notes"},"2":{i:0.0483091787441035,u:"../content/developertools/mobile/system_profiler/3.9-codeworks/03-system-requirements.htm",a:"Android-based Devices To use NVIDIA System Profiler with Android-based target devices, you must first: Have a compatible Android device. Have a compatible Android OS image.  NOTE: Devices from NVIDIA typically ship with support, while OEMs or ODMs\nproducing their own NVIDIA System Profiler choose ...",t:"System Requirements"},"3":{i:0.0483091787441035,u:"../content/developertools/mobile/system_profiler/3.9-codeworks/04-profiling-android.htm",a:"To work with NVIDIA System Profiler, the target Android device should be\nconfigured for USB debugging in the Developer options settings menu.  Please\nrefer to Android development documentation to learn how to configure the device\nfor USB debugging. On the Windows host, a compatible USB driver should ...",t:"Profiling Applications on Android Devices"},"4":{i:0.0483091787441035,u:"../content/developertools/mobile/system_profiler/3.9-codeworks/04-profiling.htm",a:"Connecting to the Target Device NVIDIA System Profiler provides a simple interface to manage multiple connections\nto Linux-based devices via SSH. The network connections manager can be launched\nthrough the device selection dropdown: The dialog has simple controls that allow adding, removing, and ...",t:"Profiling Applications on Linux Devices"},"5":{i:0.0483091787441035,u:"../content/developertools/mobile/system_profiler/3.9-codeworks/05-nvtx-trace.htm",a:"The NVIDIA Tools Extension Library (NVTX) is a powerful mechanism that allows\nusers to manually instrument their application. NVIDIA System Profiler can then\ncollect the information and present it on the timeline. NVIDIA System Profiler supports version 2.0 of the NVTX specification. The following ...",t:"NVTX Trace"},"6":{i:0.0483091787441035,u:"../content/developertools/mobile/system_profiler/3.9-codeworks/06-cuda-trace.htm",a:"NVIDIA System Profiler is capable of capturing information about CUDA execution in\nthe profiled process. The following CUDA driver and runtime (toolkit) versions are currently\nsupported: 6.5, 7.0, and 8.0. The following information can be collected and presented on the timeline in the\nreport: CUDA ...",t:"CUDA Trace"},"7":{i:0.0483091787441035,u:"../content/developertools/mobile/system_profiler/3.9-codeworks/07-opengl-trace.htm",a:"OpenGL and OpenGL ES APIs can be traced to assist in the analysis of CPU and GPU\ninteractions. A few usage examples are: Visualize how long eglSwapBuffers (or similar) is taking. API trace can easily show correlations between thread state and graphics\ndrivers behavior, uncovering where the CPU may ...",t:"OpenGL Trace"},"8":{i:0.0483091787441035,u:"../content/developertools/mobile/system_profiler/3.9-codeworks/08-elf-debug.htm",a:"Often, after a binary is built, especially if it is built with debug information\n(-g compiler flag), it gets stripped before deploying or installing.  In this\ncase, ELF sections that contain useful information, such as non-export function\nnames or unwind information, can get stripped as well. One ...",t:"Debug Versions of ELF Files"},"9":{i:0.0483091787441035,u:"../content/developertools/mobile/system_profiler/3.9-codeworks/09-report.htm",a:"Generating a New Report Users can generate a new report by stopping a profiling session.  If a profiling\nsession has been canceled, a report will not be generated, and all collected\ndata will be discarded. A new .qdrep file will be created and put into the same directory as the\nproject file ...",t:"Report"},"10":{i:0.0483091787441035,u:"../content/developertools/mobile/system_profiler/3.9-codeworks/10-broken-backtraces.htm",a:"In the symbols table there is a special entry called Broken backtraces. This\nentry is used to denote the point in the call chain where the unwinding\nalgorithms used by Tegra System Profiler could not determine what is the next\n(caller) function. Broken backtraces happen because there is no ...",t:"Broken Backtraces"},"11":{i:0.0483091787441035,u:"../content/developertools/mobile/system_profiler/3.9-codeworks/11-launch-stopped.htm",a:"In many cases, it is important to profile an application from the very\nbeginning of its execution. When launching processes, NVIDIA System Profiler\ntakes care of it by making sure that the profiling session is fully initialized\nbefore making the exec() system call on Linux, and by using the JDWP ...",t:"Launch Processes in Stopped State"},"12":{i:0.0483091787441035,u:"../content/developertools/mobile/system_profiler/3.9-codeworks/12-import-nvtxt.htm",a:"ImportNvtxt is an utility which allows to convert  NVTXT  file to SP report\nfile (*.qdrep) or to merge it with existing report file. Note: NvtxtImport supports custom TimeBase values. Only these values\nare supported: Manual — timestamps are set using absolute values. Relative — timestamps are set ...",t:"ImportNvtxt"},"13":{i:0.0483091787441035,u:"../content/developertools/mobile/system_profiler/3.9-codeworks/13-troubleshooting.htm",a:"If the profiler behaves unexpectedly during the profiling session, or the\nprofiling session fails to start, try the following steps: Close the host application. Restart the target device. Start the host application and connect to the target device. To enable logging on the host, refer to this config ...",t:"Troubleshooting"},"14":{i:0.068840579709612,u:"../content/developertools/mobile/system_profiler/3.9-automotive/05-nvtx-trace.htm",a:"The NVIDIA Tools Extension Library (NVTX) is a powerful mechanism that allows\nusers to manually instrument their application. NVIDIA System Profiler can then\ncollect the information and present it on the timeline. NVIDIA System Profiler supports version 2.0 of the NVTX specification. The following ...",t:"NVTX Trace"},"15":{i:0.068840579709612,u:"../content/developertools/mobile/system_profiler/3.9-automotive/07-opengl-trace.htm",a:"OpenGL and OpenGL ES APIs can be traced to assist in the analysis of CPU and GPU\ninteractions. A few usage examples are: Visualize how long eglSwapBuffers (or similar) is taking. API trace can easily show correlations between thread state and graphics\ndrivers behavior, uncovering where the CPU may ...",t:"OpenGL Trace"},"16":{i:0.0619967793877758,u:"../content/developertools/mobile/system_profiler/3.9-jetpack/07-opengl-trace.htm",a:"OpenGL and OpenGL ES APIs can be traced to assist in the analysis of CPU and GPU\ninteractions. A few usage examples are: Visualize how long eglSwapBuffers (or similar) is taking. API trace can easily show correlations between thread state and graphics\ndrivers behavior, uncovering where the CPU may ...",t:"OpenGL Trace"},"17":{i:0.0619967793877758,u:"../content/developertools/mobile/system_profiler/3.9-jetpack/06-cuda-trace.htm",a:"NVIDIA System Profiler is capable of capturing information about CUDA execution in\nthe profiled process. The following CUDA driver and runtime (toolkit) versions are currently\nsupported: 6.5, 7.0, and 8.0. The following information can be collected and presented on the timeline in the\nreport: CUDA ...",t:"CUDA Trace"},"18":{i:0.0619967793877758,u:"../content/developertools/mobile/system_profiler/3.9-jetpack/05-nvtx-trace.htm",a:"The NVIDIA Tools Extension Library (NVTX) is a powerful mechanism that allows\nusers to manually instrument their application. NVIDIA System Profiler can then\ncollect the information and present it on the timeline. NVIDIA System Profiler supports version 2.0 of the NVTX specification. The following ...",t:"NVTX Trace"},});