<!DOCTYPE html>
<html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd" lang="en-us" xml:lang="en-us" data-mc-search-type="Stem" data-mc-help-system-file-name="index.xml" data-mc-path-to-help-system="../../../../../" data-mc-target-type="WebHelp2" data-mc-runtime-file-type="Topic" data-mc-preload-images="false" data-mc-in-preview-mode="false" data-mc-toc-path="">
    <!-- saved from url=(0016)http://localhost -->
    <head>
        <meta name="viewport" content="width=device-width, initial-scale=1.0" />
        <meta http-equiv="X-UA-Compatible" content="IE=edge" />
        <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
        <meta charset="utf-8" /><title>Launch Processes in Stopped State</title>
        <link href="../../../../../Skins/Default/Stylesheets/Slideshow.css" rel="stylesheet" />
        <link href="../../../../../Skins/Default/Stylesheets/TextEffects.css" rel="stylesheet" />
        <link href="../../../../../Skins/Default/Stylesheets/Topic.css" rel="stylesheet" />
        <link href="../../../../../Skins/Default/Stylesheets/Components/Styles.css" rel="stylesheet" />
        <style>/*&lt;meta /&gt;*/

.needs-pie
{
	behavior: url('../../../../../Resources/Scripts/PIE.htc');
}

</style>
        <link href="../../../../resources/stylesheets/style.css" rel="stylesheet" />
        <script src="../../../../../Resources/Scripts/custom.modernizr.js">
        </script>
        <script src="../../../../../Resources/Scripts/jquery.min.js">
        </script>
        <script src="../../../../../Resources/Scripts/require.min.js">
        </script>
        <script src="../../../../../Resources/Scripts/require.config.js">
        </script>
        <script src="../../../../../Resources/Scripts/foundation.min.js">
        </script>
        <script src="../../../../../Resources/Scripts/plugins.min.js">
        </script>
        <script src="../../../../../Resources/Scripts/MadCapAll.js">
        </script>
        <script src="../../../../../Skins/Default/Scripts/GW_TopicToolbar.js">
        </script>
    </head>
    <body>
        <p class="MCWebHelpFramesetLink MCWebHelpFramesetLinkTop"><a href="../../../../../index.html#developertools/mobile/system_profiler/3.9-codeworks/11-launch-stopped.htm">Open topic with navigation</a>
        </p>
        <div class="nocontent">
            <div class="MCBreadcrumbsBox_style.css_0 breadcrumbs" data-mc-breadcrumbs-divider=" &gt; " data-mc-breadcrumbs-count="3" data-mc-toc="True"><span class="MCBreadcrumbsPrefix">You are here: </span>
            </div>
        </div>
        <h1 id="h-32ec4-0"><span class="SystemTitle">Launch Processes in Stopped State</span>
        </h1>
        <hr width="100%" size="0" align="center" />
        <p>In many cases, it is important to profile an application from the very
beginning of its execution. When launching processes, <span class="MyVariablesQuadD">NVIDIA System Profiler</span>
takes care of it by making sure that the profiling session is fully initialized
before making the <code>exec()</code> system call on Linux, and by using the JDWP protocol
on Android.</p>
        <p>If the process launch capabilities of <span class="MyVariablesQuadD">NVIDIA System Profiler</span> are not sufficient,
the application should be launched manually, and the profiler should be
configured to attach to the already launched process. One approach would be to
call <code>sleep()</code> somewhere early in the application code, which would provide
time for the user to attach to the process in the profiler, but there are two
other more convenient mechanisms that can be used on Linux, without the need to
recompile the application. (Note that the rest of this section is only
applicable to Linux-based target devices, not Android.)</p>
        <p>Both mechanisms ensure that between the time the process is created (and
therefore its PID is known) and the time any of the application's code is
called, the process is stopped and waits for a signal to be delivered before
continuing.</p>
        <h2 id="h-32ec4-1">LD_PRELOAD</h2>
        <p>The first mechanism uses <code>LD_PRELOAD</code> environment variable. It only works with
dynamically linked binaries, since static binaries do not invoke the runtime
linker, and therefore are not affected by the <code>LD_PRELOAD</code> environment variable.</p>
        <p>When launching the process, preload the following library, depending on the
process architecture:</p>
        <ul>
            <li value="1">
                <p>For ARMv7 binaries:</p>
                <blockquote><pre class="prettyprint">/opt/nvidia/tegra_system_profiler/libLauncher32.so
</pre>
                </blockquote>
            </li>
            <li value="2">
                <p>For ARMv8 binaries:</p>
                <blockquote><pre class="prettyprint">/opt/nvidia/tegra_system_profiler/libLauncher64.so
</pre>
                </blockquote>
            </li>
        </ul>
        <p>The most common way to do that is to specify the environment variable as part of
the process launch command, for example:</p>
        <blockquote><pre class="prettyprint">$ LD_PRELOAD=/opt/nvidia/tegra_system_profiler/libLauncher64.so ./my-aarch64-binary --arguments
</pre>
        </blockquote>
        <p>When loaded, this library will send itself a <code>SIGSTOP</code> signal, which is
equivalent to typing <code>Ctrl+Z</code> in the terminal. The process is now a background
job, and you can use standard commands like jobs, <code>fg</code> and <code>bg</code> to control them.
Use <code>jobs -l</code> to see the PID of the launched process.</p>
        <p>When attaching to a stopped process, <span class="MyVariablesQuadD">NVIDIA System Profiler</span> will send <code>SIGCONT</code>
signal, which is equivalent to using the <code>bg</code> command.</p>
        <h2 id="h-32ec4-2">Launcher</h2>
        <p>The second mechanism can be used with any binary. Use
<code>/opt/nvidia/tegra_system_profiler/launcher</code> to launch your application, for
example:</p>
        <blockquote><pre class="prettyprint">$ /opt/nvidia/tegra_system_profiler/launcher ./my-binary --arguments
</pre>
        </blockquote>
        <p>The process will be launched, daemonized, and wait for <code>SIGUSR1</code> signal. After
attaching to the process with <span class="MyVariablesQuadD">NVIDIA System Profiler</span>, the user needs to manually
resume execution of the process from command line:</p>
        <blockquote><pre class="prettyprint">$ pkill -USR1 launcher
</pre>
        </blockquote>
        <p>Note that <code>pkill</code> will send the signal to any process with the matching name. If
that is not desirable, use <code>kill</code> to send it to a specific process. The standard
output and error streams are redirected to <code>/tmp/stdout_&lt;PID&gt;.txt</code> and
<code>/tmp/stderr_&lt;PID&gt;.txt</code>.</p>
        <p>The launcher mechanism is more complex and less automated than the LD_PRELOAD
option, but gives more control to the user.</p>
        <hr style="height: 1px;" width="100%" size="0" align="center" />
        <script type="text/javascript" src="../../../../resources/prettify/run_prettify.js">
        </script>
        <p>&#160;</p>
        <div class="buttons popup-container clearfix topicToolbarProxy topicToolbarProxystyle.css _Skins_GW_TopicToolbar mc-component nocontent" style="mc-topic-toolbar-items: ;">
        </div>
        <p> <![CDATA[ ]]></p>
        <img src="../../../../resources/prettify/onload.png" onload="prettyprint()" />
        <p><span style="color: #696969; font-size: 8pt;">NVIDIA® System Profiler Documentation Rev. 3.9.180207 ©<span class="MyVariablesCopyrightCurrentYear">2018</span>. NVIDIA Corporation. All Rights Reserved.</span>
        </p>
    </body>
</html>