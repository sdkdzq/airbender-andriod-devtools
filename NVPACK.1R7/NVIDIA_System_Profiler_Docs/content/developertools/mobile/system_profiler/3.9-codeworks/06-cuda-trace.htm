<!DOCTYPE html>
<html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd" lang="en-us" xml:lang="en-us" data-mc-search-type="Stem" data-mc-help-system-file-name="index.xml" data-mc-path-to-help-system="../../../../../" data-mc-target-type="WebHelp2" data-mc-runtime-file-type="Topic" data-mc-preload-images="false" data-mc-in-preview-mode="false" data-mc-toc-path="">
    <!-- saved from url=(0016)http://localhost -->
    <head>
        <meta name="viewport" content="width=device-width, initial-scale=1.0" />
        <meta http-equiv="X-UA-Compatible" content="IE=edge" />
        <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
        <meta charset="utf-8" /><title>CUDA Trace</title>
        <link href="../../../../../Skins/Default/Stylesheets/Slideshow.css" rel="stylesheet" />
        <link href="../../../../../Skins/Default/Stylesheets/TextEffects.css" rel="stylesheet" />
        <link href="../../../../../Skins/Default/Stylesheets/Topic.css" rel="stylesheet" />
        <link href="../../../../../Skins/Default/Stylesheets/Components/Styles.css" rel="stylesheet" />
        <style>/*&lt;meta /&gt;*/

.needs-pie
{
	behavior: url('../../../../../Resources/Scripts/PIE.htc');
}

</style>
        <link href="../../../../resources/stylesheets/style.css" rel="stylesheet" />
        <script src="../../../../../Resources/Scripts/custom.modernizr.js">
        </script>
        <script src="../../../../../Resources/Scripts/jquery.min.js">
        </script>
        <script src="../../../../../Resources/Scripts/require.min.js">
        </script>
        <script src="../../../../../Resources/Scripts/require.config.js">
        </script>
        <script src="../../../../../Resources/Scripts/foundation.min.js">
        </script>
        <script src="../../../../../Resources/Scripts/plugins.min.js">
        </script>
        <script src="../../../../../Resources/Scripts/MadCapAll.js">
        </script>
        <script src="../../../../../Skins/Default/Scripts/GW_TopicToolbar.js">
        </script>
    </head>
    <body>
        <p class="MCWebHelpFramesetLink MCWebHelpFramesetLinkTop"><a href="../../../../../index.html#developertools/mobile/system_profiler/3.9-codeworks/06-cuda-trace.htm">Open topic with navigation</a>
        </p>
        <div class="nocontent">
            <div class="MCBreadcrumbsBox_style.css_0 breadcrumbs" data-mc-breadcrumbs-divider=" &gt; " data-mc-breadcrumbs-count="3" data-mc-toc="True"><span class="MCBreadcrumbsPrefix">You are here: </span>
            </div>
        </div>
        <h1 id="h-da55a-0"><span class="SystemTitle">CUDA Trace</span>
        </h1>
        <hr width="100%" size="0" align="center" />
        <p><span class="MyVariablesQuadD">NVIDIA System Profiler</span> is capable of capturing information about CUDA execution in
the profiled process.</p>
        <p>The following CUDA driver and runtime (toolkit) versions are currently
supported: 6.5, 7.0, and 8.0.</p>
        <p>The following information can be collected and presented on the timeline in the
report:</p>
        <ul>
            <li value="1">
                <p>CUDA API trace — trace of CUDA Runtime and CUDA Driver calls made by the
application.</p>
                <ul style="list-style-type: circle;">
                    <li value="1">
                        <p>CUDA Runtime calls typically start with <code>cuda</code> prefix (e.g.
<code>cudaLaunch</code>).</p>
                    </li>
                    <li value="2">
                        <p>CUDA Driver calls typically start with <code>cu</code> prefix (e.g.
<code>cuDeviceGetCount</code>).</p>
                    </li>
                </ul>
            </li>
            <li value="2">
                <p>CUDA workload trace — trace of activity happening on the GPU, which includes
memory operations (e.g., Host-to-Device memory copies) and kernel executions.
Within the threads that use the CUDA API, additional child rows will appear in
the timeline tree.</p>
            </li>
        </ul>
        <blockquote>
            <p>
                <img alt="CUDA thread rows" src="../3.9-jetpack/img/cuda-thread-rows.png" title="" />
            </p>
        </blockquote>
        <p>Near the bottom of the timeline row tree, the GPU node will appear and contain a
CUDA node.  Within the CUDA node, each CUDA context used within the process will
be shown along with its corresponding CUDA streams.  Steams will contain memory
operations and kernel launches on the GPU.  Kernel launches are represented by
blue, while memory transfers are displayed in red.</p>
        <blockquote>
            <p>
                <img alt="CUDA GPU rows" src="../3.9-jetpack/img/cuda-gpu-rows.png" title="" />
            </p>
        </blockquote>
        <p>The easiest way to capture CUDA information is to launch the process from
<span class="MyVariablesQuadD">NVIDIA System Profiler</span>, and it will setup the environment for you. To do so,
simply set up a normal launch and select the <strong>Collect CUDA trace</strong> checkbox.</p>
        <blockquote>
            <p>
                <img alt="Configure CUDA trace" src="../3.9-jetpack/img/configure-cuda-trace.png" title="" />
            </p>
        </blockquote>
        <p>Additional configuration parameters are available:</p>
        <ul>
            <li value="1">
                <p><strong>Flush data periodically</strong> — specifies the period after which an attempt to
flush CUDA trace data will be made.  Normally, in order to collect full CUDA
trace, the application needs to finalize the device used for CUDA work (call
<code>cudaDeviceReset()</code>, and then let the application gracefully exit (as opposed
to crashing).</p>
                <p>This option allows flushing CUDA trace data even before the device
is finalized.  However, it might introduce additional overhead to a random
CUDA Driver or CUDA Runtime API call.</p>
            </li>
            <li value="2">
                <p><strong>Skip some API calls</strong> — avoids tracing insignificant CUDA Runtime API calls
(namely, <code>cudaConfigureCall()</code>, <code>cudaSetupArgument()</code>,
<code>cudaHostGetDevicePointers()</code>).  Not tracing these functions allows to
significantly reduce the profiling overhead, without losing any interesting
data.</p>
            </li>
        </ul>
        <p>If desired, the target application can be manually set up to collect CUDA trace.
To capture information about CUDA execution, the following requirements should
be satisfied:</p>
        <ul>
            <li value="1">
                <p>The profiled process should be started with the specified environment
variable, depending on the architecture of the process:</p>
                <ul>
                    <li value="1">
                        <p>For ARMv7 (32-bit) processes: <code>CUDA_INJECTION32_PATH</code>, which should
point to the injection library:</p>
                        <blockquote><pre class="prettyprint">/opt/nvidia/tegra_system_profiler/libToolsInjection32.so
</pre>
                        </blockquote>
                    </li>
                    <li value="2">
                        <p>For ARMv8 (64-bit) processes: <code>CUDA_INJECTION64_PATH</code>, which should
point to the injection library:</p>
                        <blockquote><pre class="prettyprint">/opt/nvidia/tegra_system_profiler/libToolsInjection64.so
</pre>
                        </blockquote>
                    </li>
                </ul>
            </li>
        </ul>
        <p>If the application is started by <span class="MyVariablesQuadD">NVIDIA System Profiler</span>, all required environment
variables will be set automatically.</p>
        <p>Please note that if your application crashes before all collected CUDA trace
data has been copied out, some or all data might be lost and not present in the
report.</p>
        <hr style="height: 1px;" width="100%" size="0" align="center" />
        <script type="text/javascript" src="../../../../resources/prettify/run_prettify.js">
        </script>
        <p>&#160;</p>
        <div class="buttons popup-container clearfix topicToolbarProxy topicToolbarProxystyle.css _Skins_GW_TopicToolbar mc-component nocontent" style="mc-topic-toolbar-items: ;">
        </div>
        <p> <![CDATA[ ]]></p>
        <img src="../../../../resources/prettify/onload.png" onload="prettyprint()" />
        <p><span style="color: #696969; font-size: 8pt;">NVIDIA® System Profiler Documentation Rev. 3.9.180207 ©<span class="MyVariablesCopyrightCurrentYear">2018</span>. NVIDIA Corporation. All Rights Reserved.</span>
        </p>
    </body>
</html>