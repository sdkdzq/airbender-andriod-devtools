.TH "Execution Control" 3 "20 Mar 2015" "Version 6.0" "Doxygen" \" -*- nroff -*-
.ad l
.nh
.SH NAME
Execution Control \- 
.SS "Functions"

.in +1c
.ti -1c
.RI "\fBcudaError_t\fP \fBcudaConfigureCall\fP (dim3 gridDim, dim3 blockDim, size_t sharedMem=0, \fBcudaStream_t\fP stream=0)"
.br
.RI "\fIConfigure a device-launch. \fP"
.ti -1c
.RI "__cudart_builtin__ \fBcudaError_t\fP \fBcudaFuncGetAttributes\fP (struct \fBcudaFuncAttributes\fP *attr, const void *func)"
.br
.RI "\fIFind out attributes for a given function. \fP"
.ti -1c
.RI "\fBcudaError_t\fP \fBcudaFuncSetCacheConfig\fP (const void *func, enum \fBcudaFuncCache\fP cacheConfig)"
.br
.RI "\fISets the preferred cache configuration for a device function. \fP"
.ti -1c
.RI "\fBcudaError_t\fP \fBcudaFuncSetSharedMemConfig\fP (const void *func, enum \fBcudaSharedMemConfig\fP config)"
.br
.RI "\fISets the shared memory configuration for a device function. \fP"
.ti -1c
.RI "\fBcudaError_t\fP \fBcudaLaunch\fP (const void *func)"
.br
.RI "\fILaunches a device function. \fP"
.ti -1c
.RI "\fBcudaError_t\fP \fBcudaSetDoubleForDevice\fP (double *d)"
.br
.RI "\fIConverts a double argument to be executed on a device. \fP"
.ti -1c
.RI "\fBcudaError_t\fP \fBcudaSetDoubleForHost\fP (double *d)"
.br
.RI "\fIConverts a double argument after execution on a device. \fP"
.ti -1c
.RI "\fBcudaError_t\fP \fBcudaSetupArgument\fP (const void *arg, size_t size, size_t offset)"
.br
.RI "\fIConfigure a device launch. \fP"
.in -1c
.SH "Detailed Description"
.PP 
\\brief execution control functions of the CUDA runtime API (cuda_runtime_api.h)
.PP
This section describes the execution control functions of the CUDA runtime application programming interface.
.PP
Some functions have overloaded C++ API template versions documented separately in the \fBC++ API Routines\fP module. 
.SH "Function Documentation"
.PP 
.SS "\fBcudaError_t\fP cudaConfigureCall (dim3 gridDim, dim3 blockDim, size_t sharedMem = \fC0\fP, \fBcudaStream_t\fP stream = \fC0\fP)"
.PP
Specifies the grid and block dimensions for the device call to be executed similar to the execution configuration syntax. \fBcudaConfigureCall()\fP is stack based. Each call pushes data on top of an execution stack. This data contains the dimension for the grid and thread blocks, together with any arguments for the call.
.PP
\fBParameters:\fP
.RS 4
\fIgridDim\fP - Grid dimensions 
.br
\fIblockDim\fP - Block dimensions 
.br
\fIsharedMem\fP - Shared memory 
.br
\fIstream\fP - Stream identifier
.RE
.PP
\fBReturns:\fP
.RS 4
\fBcudaSuccess\fP, \fBcudaErrorInvalidConfiguration\fP 
.RE
.PP
\fBNote:\fP
.RS 4
This function uses standard  semantics. 
.PP
Note that this function may also return error codes from previous, asynchronous launches.
.RE
.PP
\fBSee also:\fP
.RS 4
\fBcudaFuncSetCacheConfig (C API)\fP, \fBcudaFuncGetAttributes (C API)\fP, \fBcudaLaunch (C API)\fP, \fBcudaSetDoubleForDevice\fP, \fBcudaSetDoubleForHost\fP, \fBcudaSetupArgument (C API)\fP, 
.RE
.PP

.SS "__cudart_builtin__ \fBcudaError_t\fP cudaFuncGetAttributes (struct \fBcudaFuncAttributes\fP * attr, const void * func)"
.PP
This function obtains the attributes of a function specified via \fCfunc\fP. \fCfunc\fP is a device function symbol and must be declared as a \fC__global__\fP function. The fetched attributes are placed in \fCattr\fP. If the specified function does not exist, then \fBcudaErrorInvalidDeviceFunction\fP is returned.
.PP
Note that some function attributes such as \fBmaxThreadsPerBlock\fP may vary based on the device that is currently being used.
.PP
\fBParameters:\fP
.RS 4
\fIattr\fP - Return pointer to function's attributes 
.br
\fIfunc\fP - Device function symbol
.RE
.PP
\fBReturns:\fP
.RS 4
\fBcudaSuccess\fP, \fBcudaErrorInitializationError\fP, \fBcudaErrorInvalidDeviceFunction\fP 
.RE
.PP
\fBNote:\fP
.RS 4
Note that this function may also return error codes from previous, asynchronous launches. 
.PP
Use of a string naming a function as the \fCfunc\fP paramater was deprecated in CUDA 4.1 and removed in CUDA 5.0.
.RE
.PP
\fBSee also:\fP
.RS 4
\fBcudaConfigureCall\fP, \fBcudaFuncSetCacheConfig (C API)\fP, \fBcudaFuncGetAttributes (C++ API)\fP, \fBcudaLaunch (C API)\fP, \fBcudaSetDoubleForDevice\fP, \fBcudaSetDoubleForHost\fP, \fBcudaSetupArgument (C API)\fP 
.RE
.PP

.SS "\fBcudaError_t\fP cudaFuncSetCacheConfig (const void * func, enum \fBcudaFuncCache\fP cacheConfig)"
.PP
On devices where the L1 cache and shared memory use the same hardware resources, this sets through \fCcacheConfig\fP the preferred cache configuration for the function specified via \fCfunc\fP. This is only a preference. The runtime will use the requested configuration if possible, but it is free to choose a different configuration if required to execute \fCfunc\fP.
.PP
\fCfunc\fP is a device function symbol and must be declared as a \fC__global__\fP function. If the specified function does not exist, then \fBcudaErrorInvalidDeviceFunction\fP is returned.
.PP
This setting does nothing on devices where the size of the L1 cache and shared memory are fixed.
.PP
Launching a kernel with a different preference than the most recent preference setting may insert a device-side synchronization point.
.PP
The supported cache configurations are:
.IP "\(bu" 2
\fBcudaFuncCachePreferNone\fP: no preference for shared memory or L1 (default)
.IP "\(bu" 2
\fBcudaFuncCachePreferShared\fP: prefer larger shared memory and smaller L1 cache
.IP "\(bu" 2
\fBcudaFuncCachePreferL1\fP: prefer larger L1 cache and smaller shared memory
.IP "\(bu" 2
\fBcudaFuncCachePreferEqual\fP: prefer equal size L1 cache and shared memory
.PP
.PP
\fBParameters:\fP
.RS 4
\fIfunc\fP - Device function symbol 
.br
\fIcacheConfig\fP - Requested cache configuration
.RE
.PP
\fBReturns:\fP
.RS 4
\fBcudaSuccess\fP, \fBcudaErrorInitializationError\fP, \fBcudaErrorInvalidDeviceFunction\fP 
.RE
.PP
\fBNote:\fP
.RS 4
Note that this function may also return error codes from previous, asynchronous launches. 
.PP
Use of a string naming a function as the \fCfunc\fP paramater was deprecated in CUDA 4.1 and removed in CUDA 5.0.
.RE
.PP
\fBSee also:\fP
.RS 4
\fBcudaConfigureCall\fP, \fBcudaFuncSetCacheConfig (C++ API)\fP, \fBcudaFuncGetAttributes (C API)\fP, \fBcudaLaunch (C API)\fP, \fBcudaSetDoubleForDevice\fP, \fBcudaSetDoubleForHost\fP, \fBcudaSetupArgument (C API)\fP, \fBcudaThreadGetCacheConfig\fP, \fBcudaThreadSetCacheConfig\fP 
.RE
.PP

.SS "\fBcudaError_t\fP cudaFuncSetSharedMemConfig (const void * func, enum \fBcudaSharedMemConfig\fP config)"
.PP
On devices with configurable shared memory banks, this function will force all subsequent launches of the specified device function to have the given shared memory bank size configuration. On any given launch of the function, the shared memory configuration of the device will be temporarily changed if needed to suit the function's preferred configuration. Changes in shared memory configuration between subsequent launches of functions, may introduce a device side synchronization point.
.PP
Any per-function setting of shared memory bank size set via \fBcudaFuncSetSharedMemConfig\fP will override the device wide setting set by \fBcudaDeviceSetSharedMemConfig\fP.
.PP
Changing the shared memory bank size will not increase shared memory usage or affect occupancy of kernels, but may have major effects on performance. Larger bank sizes will allow for greater potential bandwidth to shared memory, but will change what kinds of accesses to shared memory will result in bank conflicts.
.PP
This function will do nothing on devices with fixed shared memory bank size.
.PP
The supported bank configurations are:
.IP "\(bu" 2
cudaSharedMemBankSizeDefault: use the device's shared memory configuration when launching this function.
.IP "\(bu" 2
cudaSharedMemBankSizeFourByte: set shared memory bank width to be four bytes natively when launching this function.
.IP "\(bu" 2
cudaSharedMemBankSizeEightByte: set shared memory bank width to be eight bytes natively when launching this function.
.PP
.PP
\fBParameters:\fP
.RS 4
\fIfunc\fP - Device function symbol 
.br
\fIconfig\fP - Requested shared memory configuration
.RE
.PP
\fBReturns:\fP
.RS 4
\fBcudaSuccess\fP, \fBcudaErrorInitializationError\fP, \fBcudaErrorInvalidDeviceFunction\fP, \fBcudaErrorInvalidValue\fP, 
.RE
.PP
\fBNote:\fP
.RS 4
Note that this function may also return error codes from previous, asynchronous launches. 
.PP
Use of a string naming a function as the \fCfunc\fP paramater was deprecated in CUDA 4.1 and removed in CUDA 5.0.
.RE
.PP
\fBSee also:\fP
.RS 4
\fBcudaConfigureCall\fP, \fBcudaDeviceSetSharedMemConfig\fP, \fBcudaDeviceGetSharedMemConfig\fP, \fBcudaDeviceSetCacheConfig\fP, \fBcudaDeviceGetCacheConfig\fP, \fBcudaFuncSetCacheConfig\fP 
.RE
.PP

.SS "\fBcudaError_t\fP cudaLaunch (const void * func)"
.PP
Launches the function \fCfunc\fP on the device. The parameter \fCfunc\fP must be a device function symbol. The parameter specified by \fCfunc\fP must be declared as a \fC__global__\fP function. \fBcudaLaunch()\fP must be preceded by a call to \fBcudaConfigureCall()\fP since it pops the data that was pushed by \fBcudaConfigureCall()\fP from the execution stack.
.PP
\fBParameters:\fP
.RS 4
\fIfunc\fP - Device function symbol
.RE
.PP
\fBReturns:\fP
.RS 4
\fBcudaSuccess\fP, \fBcudaErrorInvalidDeviceFunction\fP, \fBcudaErrorInvalidConfiguration\fP, \fBcudaErrorLaunchFailure\fP, \fBcudaErrorLaunchTimeout\fP, \fBcudaErrorLaunchOutOfResources\fP, \fBcudaErrorSharedObjectInitFailed\fP 
.RE
.PP
\fBNote:\fP
.RS 4
Note that this function may also return error codes from previous, asynchronous launches. 
.PP
Use of a string naming a variable as the \fCsymbol\fP paramater was removed in CUDA 5.0.
.RE
.PP
\fBSee also:\fP
.RS 4
\fBcudaConfigureCall\fP, \fBcudaFuncSetCacheConfig (C API)\fP, \fBcudaFuncGetAttributes (C API)\fP, \fBcudaLaunch (C++ API)\fP, \fBcudaSetDoubleForDevice\fP, \fBcudaSetDoubleForHost\fP, \fBcudaSetupArgument (C API)\fP, \fBcudaThreadGetCacheConfig\fP, \fBcudaThreadSetCacheConfig\fP 
.RE
.PP

.SS "\fBcudaError_t\fP cudaSetDoubleForDevice (double * d)"
.PP
\fBParameters:\fP
.RS 4
\fId\fP - Double to convert
.RE
.PP
Converts the double value of \fCd\fP to an internal float representation if the device does not support double arithmetic. If the device does natively support doubles, then this function does nothing.
.PP
\fBReturns:\fP
.RS 4
\fBcudaSuccess\fP 
.RE
.PP
\fBNote:\fP
.RS 4
Note that this function may also return error codes from previous, asynchronous launches.
.RE
.PP
\fBSee also:\fP
.RS 4
\fBcudaConfigureCall\fP, \fBcudaFuncSetCacheConfig (C API)\fP, \fBcudaFuncGetAttributes (C API)\fP, \fBcudaLaunch (C API)\fP, \fBcudaSetDoubleForHost\fP, \fBcudaSetupArgument (C API)\fP 
.RE
.PP

.SS "\fBcudaError_t\fP cudaSetDoubleForHost (double * d)"
.PP
Converts the double value of \fCd\fP from a potentially internal float representation if the device does not support double arithmetic. If the device does natively support doubles, then this function does nothing.
.PP
\fBParameters:\fP
.RS 4
\fId\fP - Double to convert
.RE
.PP
\fBReturns:\fP
.RS 4
\fBcudaSuccess\fP 
.RE
.PP
\fBNote:\fP
.RS 4
Note that this function may also return error codes from previous, asynchronous launches.
.RE
.PP
\fBSee also:\fP
.RS 4
\fBcudaConfigureCall\fP, \fBcudaFuncSetCacheConfig (C API)\fP, \fBcudaFuncGetAttributes (C API)\fP, \fBcudaLaunch (C API)\fP, \fBcudaSetDoubleForDevice\fP, \fBcudaSetupArgument (C API)\fP 
.RE
.PP

.SS "\fBcudaError_t\fP cudaSetupArgument (const void * arg, size_t size, size_t offset)"
.PP
Pushes \fCsize\fP bytes of the argument pointed to by \fCarg\fP at \fCoffset\fP bytes from the start of the parameter passing area, which starts at offset 0. The arguments are stored in the top of the execution stack. \fBcudaSetupArgument()\fP must be preceded by a call to \fBcudaConfigureCall()\fP.
.PP
\fBParameters:\fP
.RS 4
\fIarg\fP - Argument to push for a kernel launch 
.br
\fIsize\fP - Size of argument 
.br
\fIoffset\fP - Offset in argument stack to push new arg
.RE
.PP
\fBReturns:\fP
.RS 4
\fBcudaSuccess\fP 
.RE
.PP
\fBNote:\fP
.RS 4
Note that this function may also return error codes from previous, asynchronous launches.
.RE
.PP
\fBSee also:\fP
.RS 4
\fBcudaConfigureCall\fP, \fBcudaFuncSetCacheConfig (C API)\fP, \fBcudaFuncGetAttributes (C API)\fP, \fBcudaLaunch (C API)\fP, \fBcudaSetDoubleForDevice\fP, \fBcudaSetDoubleForHost\fP, \fBcudaSetupArgument (C++ API)\fP, 
.RE
.PP

.SH "Author"
.PP 
Generated automatically by Doxygen from the source code.
