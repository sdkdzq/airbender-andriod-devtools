//----------------------------------------------------------------------------------
//
// Copyright (c) 2014, NVIDIA CORPORATION. All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions
// are met:
//  * Redistributions of source code must retain the above copyright
//    notice, this list of conditions and the following disclaimer.
//  * Redistributions in binary form must reproduce the above copyright
//    notice, this list of conditions and the following disclaimer in the
//    documentation and/or other materials provided with the distribution.
//  * Neither the name of NVIDIA CORPORATION nor the names of its
//    contributors may be used to endorse or promote products derived
//    from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS ``AS IS'' AND ANY
// EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
// IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
// PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT OWNER OR
// CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
// EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
// PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
// PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
// OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
//----------------------------------------------------------------------------------

#ifndef ANDROIDAPPLICATION_H_
#define ANDROIDAPPLICATION_H_

#include <android/log.h>
#include <nv_egl_util/nv_egl_util.h>
#include <nv_and_util/nv_native_app_glue.h>
#include <GLES2/gl2.h>

#include <boxFilter_kernel.h>

#define APP_NAME "native_basic"

#define LOGD(...) ((void)__android_log_print(ANDROID_LOG_DEBUG,  \
                                             APP_NAME, \
                                             __VA_ARGS__))
#define LOGI(...) ((void)__android_log_print(ANDROID_LOG_INFO,  \
                                             APP_NAME, \
                                             __VA_ARGS__))
#define LOGW(...) ((void)__android_log_print(ANDROID_LOG_WARN,  \
                                             APP_NAME, \
                                             __VA_ARGS__))

class NativeApp
{
    public:
        // Application state
        enum State
        {
            INITIALIZATION, MAIN_LOOP, EXIT
        };

        NativeApp(android_app *app, NvEGLUtil *egl);
        virtual ~NativeApp();
        void renderFrame(void);

        State getState(void) const;

    private:
        // Handle commands
        void handleCommand(int cmd);
        // Handle inputs
        int handleInput(AInputEvent const *event);

        // Wrapper to handle commands generated by the UI
        static void HandleCommand(android_app *app, int32_t cmd);
        // Wrapper to handle input events generated by the UI
        static int32_t HandleInput(android_app *app, AInputEvent *event);

        // Handler to plain texture fragment program
        GLint mPlainTextureProgram;
        // flag to notify screenPress
        bool mScreenPressed;
        // Handler to source texture
        GLuint mInputImageTexture;
        // Handler to output texture
        GLuint mOutputImageTexture;
        // width of input image
        int mTextureWidth;
        // height of input image
        int mTextureHeight;
        // Box Filter
        gpu_bf::BoxFilterDemo boxfilter;
        // Holds a point to EGL wrapper
        NvEGLUtil *mEgl;
        // Holds a pointer to android native activity instance
        android_app *mNativeAppInstance;
        // number of iterations
        int mIterations;
        // radius of box filter
        int mFilterRadius;
        // sign of box filter
        int mFilterSign;
        // number of threads per block
        int mNthreads;
        // mProcessedData for holding output from kernel
        unsigned int *mProcessedData;
        // Holds application state
        State mCurrentApplicationState;
};

#endif /* ANDROIDAPPLICATION_H_ */
